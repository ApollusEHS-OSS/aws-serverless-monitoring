---
AWSTemplateFormatVersion: 2010-09-09

Description: 'Provisions HA Grafana on ECS@Fargate'

Parameters:

  Environment:
    Type: 'String'
  HostedZone:
    Type: 'String'
  CertificateArn:
    Type: 'String'
  
  GrafanaImage:
    Type: 'String'
  GrafanaServiceDomain:
    Type: 'String'

  GrafanaDatabaseEngine:
    Type: 'String'
    AllowedValues:
      - mysql
      - postgres
  
  GrafanaSessionProviderString:
    Type: 'String'

  GrafanaDatabaseHost:
    Type: 'String'
  GrafanaDatabaseName:
    Type: 'String'
  GrafanaDatabaseUser:
    Type: 'String'
  GrafanaDatabasePassword:
    Type: 'String'
    NoEcho: true

  # this should be imported I guess...
  # GrafanaDatabaseSecurityGroupId:
  #   Type: 'String'
  
  GrafanaServiceAdminUser:
    Type: 'String'
  GrafanaServiceAdminPassword:
    Type: 'String'
    NoEcho: true

  GoogleAuthClientId:
    Type: 'String'
  GoogleAuthClientSecret:
    Type: 'String'
    NoEcho: true
  GoogleAuthAllowedDomains:
    Type: 'String'


Resources:

  Cluster:
    Type: 'AWS::ECS::Cluster'

  FargateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'Grafana Fargate security group (${Environment})'
      VpcId:
        Fn::ImportValue: !Sub ${Environment}-vpc

  # Grafana instances in Fargate can only by accessed by the load balancer and each other
  FargateSecurityGroupIngressFromLoadBalancer:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: !Sub 'Ingress from the public load balancer (${Environment})'
      GroupId: !GetAtt 'FargateSecurityGroup.GroupId'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt 'LoadBalancerSecurityGroup.GroupId'

  FargateSecurityGroupIngressFromSelf:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: !Sub 'Ingress from other containers in this group (${Environment})'
      GroupId: !GetAtt 'FargateSecurityGroup.GroupId'
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt 'FargateSecurityGroup.GroupId'

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'Grafana load balancer security group (${Environment})'
      VpcId:
        Fn::ImportValue: !Sub ${Environment}-vpc

  # The load balancer is open to the public
  LoadBalancerSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: !Sub 'Ingress from the public (${Environment})'
      GroupId: !GetAtt 'LoadBalancerSecurityGroup.GroupId'
      IpProtocol: -1

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: 'internet-facing'
      LoadBalancerAttributes:
        - Key: 'idle_timeout.timeout_seconds'
          Value: '30'
      Subnets: 
        Fn::Split: 
          - ','
          - Fn::ImportValue: !Sub ${Environment}-public-subnets
      SecurityGroups:
        - !Ref 'LoadBalancerSecurityGroup'

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: 'HTTP'

  LoadBalancerSecureListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 443
      Protocol: 'HTTPS'

  GrafanaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', ['GrafanaExecutionRole', !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/service-role/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
 
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join ['-', ['grafana', !Ref 'Environment']]

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'grafana'
      Cpu: 256
      Memory: 512
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
        - 'FARGATE'
      ExecutionRoleArn: !GetAtt 'GrafanaExecutionRole.Arn'
      TaskRoleArn: !GetAtt 'GrafanaTaskRole.Arn'
      ContainerDefinitions:
        - Name: 'grafana'
          Cpu: 256
          Memory: 512
          Image: !Ref GrafanaImage
          Environment:

            # Environment variables override Grafana configuration settings
            # See http://docs.grafana.org/installation/configuration/

            #  SERVER
            - Name: 'GF_SERVER_PROTOCOL'
              Value: 'http'
            - Name: 'GF_SERVER_DOMAIN'
              Value: !Ref GrafanaServiceDomain
            - Name: 'GF_SERVER_ENFORCE_DOMAIN'
              Value: 'true'
            - Name: 'GF_SERVER_ROOT_URL'
              Value: !Sub https://${GrafanaServiceDomain}
            
            #  DATABASE [MYSQL]
            - Name: 'GF_DATABASE_TYPE'
              Value: !Ref GrafanaDatabaseEngine
            - Name: 'GF_DATABASE_HOST'
              Value: !Ref GrafanaDatabaseHost 
            - Name: 'GF_DATABASE_NAME'
              Value: !Ref GrafanaDatabaseName
            - Name: 'GF_DATABASE_USER'
              Value: !Ref GrafanaDatabaseUser
            - Name: 'GF_DATABASE_PASSWORD'
              Value: !Ref GrafanaDatabasePassword
            - Name: 'GF_DATABASE_SSL_MODE'
              Value: 'disable'

            # SECURITY
            - Name: 'GF_SECURITY_DISABLE_GRAVATAR'
              Value: 'true'
            - Name: 'GF_SECURITY_ADMIN_USER'
              Value: !Ref GrafanaServiceAdminUser
            - Name: 'GF_SECURITY_ADMIN_PASSWORD'
              Value: !Ref GrafanaServiceAdminPassword
            
            #  USERS
            - Name: 'GF_USERS_ALLOW_SIGN_UP'
              Value: 'false'
            - Name: 'GF_USERS_ORG_CREATE'
              Value: 'false'
            - Name: 'GF_USERS_AUTO_ASSIGN_ORG'
              Value: 'true'
            - Name: 'GF_USERS_AUTO_ASSIGN_ORG_ROLE'
              Value: 'Editor'
            
            # AUTH [Google]
            - Name: 'GF_AUTH_DISABLE_LOGIN_FORM'
              Value: 'false'
            - Name: 'GF_AUTH_GOOGLE_ENABLED'
              Value: 'true'
            - Name: 'GF_AUTH_GOOGLE_SCOPES'
              Value: 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email'
            - Name: 'GF_AUTH_GOOGLE_AUTH_URL'
              Value: 'https://accounts.google.com/o/oauth2/auth'
            - Name: 'GF_AUTH_GOOGLE_TOKEN_URL'
              Value: 'https://accounts.google.com/o/oauth2/token'
            - Name: 'GF_AUTH_GOOGLE_ALLOW_SIGN_UP'
              Value: 'true'
            - Name: 'GF_AUTH_GOOGLE_CLIENT_ID'
              Value: !Ref GoogleAuthClientId
            - Name: 'GF_AUTH_GOOGLE_CLIENT_SECRET'
              Value: !Ref GoogleAuthClientSecret
            - Name: 'GF_AUTH_GOOGLE_ALLOWED_DOMAINS'
              Value: !Ref GoogleAuthAllowedDomains #'cloudreach.com someotherwebsite.com'

            # SESSION
            - Name: 'GF_SESSION_PROVIDER'
              Value: !Ref GrafanaDatabaseEngine
            - Name: 'GF_SESSION_PROVIDER_CONFIG'
              Value: !Ref GrafanaSessionProviderString
            
            # SNAPSHOTS
            - Name: 'GF_SNAPSHOTS_EXTERNAL_ENABLED'
              Value: 'false'
            
            # PLUGINS
            - Name: 'GF_INSTALL_PLUGINS'
              Value: 'grafana-azure-monitor-datasource'

          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Join ['-', ['grafana', !Ref 'Environment']]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'grafana'
  
  Service:
    Type: 'AWS::ECS::Service'
    DependsOn: 'LoadBalancerListener'
    Properties:
      ServiceName: 'grafana'
      Cluster: !Ref 'Cluster'
      LaunchType: 'FARGATE'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
            - !Ref FargateSecurityGroup
            - Fn::ImportValue: !Sub ${Environment}-grafana-sg-id
          Subnets:
            Fn::Split: 
              - ','
              - Fn::ImportValue: !Sub ${Environment}-private-subnets
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: 'grafana'
          ContainerPort: 3000
          TargetGroupArn: !Ref 'TargetGroup'

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/metrics'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 2
      TargetType: 'ip'
      Name: !Join ['-', ['grafana', !Ref 'Environment']]
      Port: 80
      Protocol: 'HTTP'
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 600
      VpcId:
        Fn::ImportValue: !Sub ${Environment}-vpc

  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    DependsOn: 'Service'
    Properties:
      ServiceNamespace: 'ecs'
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Join ['/', ['service', !Ref 'Cluster', 'grafana']]
      MinCapacity: 2
      MaxCapacity: 10
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'

  ScaleDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    DependsOn: 'ScalableTarget'
    Properties:
      PolicyName: !Join ['/', ['scale', !Ref 'Environment', 'grafana', 'down']]
      PolicyType: 'StepScaling'
      ResourceId: !Join ['/', ['service', !Ref 'Cluster', 'grafana']]
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: 'Average'
        Cooldown: 60

  ScaleUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    DependsOn: 'ScalableTarget'
    Properties:
      PolicyName: !Join ['/', ['scale', !Ref 'Environment', 'grafana', 'up']]
      PolicyType: 'StepScaling'
      ResourceId: !Join ['/', ['service', !Ref 'Cluster', 'grafana']]
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 25
            ScalingAdjustment: 3
        MetricAggregationType: 'Average'
        Cooldown: 60

  LowCpuUsageAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join ['-', ['grafana', 'lowcpu', !Ref 'Environment']]
      AlarmDescription: !Sub 'Low CPU utilisation for Grafana cluster (${Environment})'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/ECS'
      Dimensions:
        - Name: 'ServiceName'
          Value: 'grafana'
        - Name: 'ClusterName'
          Value: !Ref 'Cluster'
      Statistic: 'Average'
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: 'LessThanOrEqualToThreshold'
      AlarmActions:
        - !Ref 'ScaleDownPolicy'

  HighCpuUsageAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Join ['-', ['grafana', 'highcpu', !Ref 'Environment']]
      AlarmDescription: !Sub 'High CPU utilisation for Grafana cluster (${Environment})'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/ECS'
      Dimensions:
        - Name: 'ServiceName'
          Value: 'grafana'
        - Name: 'ClusterName'
          Value: !Ref 'Cluster'
      Statistic: 'Average'
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      AlarmActions:
        - !Ref 'ScaleUpPolicy'

  GrafanaTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', ['GrafanaTaskRole', !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

  GrafanaAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', ['GrafanaAccessRole', !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS:
                - !GetAtt 'GrafanaTaskRole.Arn'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'GrafanaCloudwatchReadMetrics'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'cloudwatch:ListMetrics'
                  - 'cloudwatch:GetMetricStatistics'
                Resource: '*'
        - PolicyName: 'GrafanaEC2ReadTags'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:DescribeTags'
                  - 'ec2:DescribeInstances'
                Resource: '*'

  # opening a rule for fargate to poke aurora
  GrafanaDBSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: !Sub 'Ingress from Fargate containers (${Environment})'
      GroupId: 
        Fn::ImportValue: !Sub '${Environment}-grafana-database-sg-id'
      IpProtocol: 'tcp'
      FromPort: 3306 # TODO: import this
      ToPort: 3306 # TODO: import this
      SourceSecurityGroupId: !Ref 'FargateSecurityGroup'

Outputs:
  DNSName: 
    Value: !GetAtt 'LoadBalancer.DNSName'
    Export:
      Name: !Join ['-', [!Ref 'Environment','grafana', 'service', 'lb', 'dns']]
  HostedZoneId: 
    Value: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
    Export:
      Name: !Join ['-', [!Ref 'Environment', 'grafana', 'service', 'lb', 'hosted-zone-id']]
  GrafanaAccessRole:
    Value: !GetAtt 'GrafanaAccessRole.Arn'
    Export:
      Name: !Join ['-', [!Ref 'Environment', 'grafana', 'access-role']]
